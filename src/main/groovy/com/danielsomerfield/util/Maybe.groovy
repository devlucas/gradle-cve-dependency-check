package com.danielsomerfield.util

abstract class Maybe<T> {

  public abstract boolean exists()
  public abstract T getValue()

  public static <T> Maybe<T> some(T value) {
    return value == null ? new Nothing() : new Some(value)
  }

  public static <T> Maybe<T> nothing() {
    new Nothing()
  }

  private static class Some<T> extends Maybe {
    private T value;

    public Some(final T value) {
      this.value = value
    }

    public boolean exists() {
      true
    }

    public T getValue(){
      value
    }
  }

  private static class Nothing extends Maybe {

    @Override
    boolean exists() {
      return false // TODO
    }

    @Override
    Object getValue() {
      throw new IllegalStateException("Cannot get value of Nothing")
    }
  }
}
