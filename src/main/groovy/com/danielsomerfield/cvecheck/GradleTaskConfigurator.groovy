package com.danielsomerfield.cvecheck

import com.danielsomerfield.cvecheck.gradle.GradleProjectScanner
import com.danielsomerfield.cvecheck.gradle.ProjectConfiguration
import com.danielsomerfield.cvecheck.gradle.ScanTask
import com.danielsomerfield.util.io.FilePathOutputStreamFactory
import com.danielsomerfield.cvecheck.owaspdependencycheck.OWASPGradleProjectScanner
import com.danielsomerfield.cvecheck.owaspdependencycheck.OWASPScanResult
import com.danielsomerfield.cvecheck.owaspdependencycheck.OWASPScanningEngine
import com.danielsomerfield.util.io.OutputStreamFactory
import com.danielsomerfield.cvecheck.owaspdependencycheck.ScanningEngine
import com.danielsomerfield.cvecheck.owaspdependencycheck.reporting.OWASPScanReportGenerator
import com.danielsomerfield.cvecheck.reporting.ScanReportGenerator
import org.gradle.api.Project
import org.owasp.dependencycheck.Engine
import org.owasp.dependencycheck.data.nvdcve.CveDB
import org.owasp.dependencycheck.reporting.ReportGenerator
import org.owasp.dependencycheck.utils.Settings

class GradleTaskConfigurator {

  private Configuration configuration;

  def GradleTaskConfigurator(Project project) {
    this.configuration = new ProjectConfiguration(project);
  }

  def ScanTask scanTask() {
    new ScanTask(scanner())
  }

  private ScanReportGenerator scanReportGenerator() {
    return new OWASPScanReportGenerator(owaspReportGenerator(), ReportGenerator.Format.VULN, outputStreamFactory())
  }

  def OutputStreamFactory outputStreamFactory() {
    return new FilePathOutputStreamFactory("${configuration.buildRoot()}/reports/vulnerabilities.html")
  }

  private ReportGenerator owaspReportGenerator() {
    def engine = engine()
    new ReportGenerator("vulnerability scan", engine.dependencies, engine.analyzers, cveDB().databaseProperties)
  }

  private CveDB cveDB() {
    new CveDB()
  }

  private GradleProjectScanner scanner() {
    new OWASPGradleProjectScanner(scanReportGenerator(), scanningEngine())
  }

  private ScanningEngine<OWASPScanResult> scanningEngine() {
    return new OWASPScanningEngine(engine())
  }

  private Engine engine() {
    Settings.initialize()
    Settings.setBoolean(Settings.KEYS.AUTO_UPDATE, false);
    new Engine()
  }
}
