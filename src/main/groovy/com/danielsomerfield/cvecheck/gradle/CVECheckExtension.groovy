package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.ScanResultHandler
import com.danielsomerfield.cvecheck.gradle.handlers.VulnerabilityCountResultHandler
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.BuildRule
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.BuildRuleBuilder
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.BuildRules
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.CVEBuildRuleBuilder
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.CVSSOverallThresholdBuildRule
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.ListBackedBuildRules

class CVECheckExtension {

  private final BuildRuleBuilder buildRuleBuilder;
  private final BuildRules buildRules;
  private static final List<BuildRule> defaultBuildRules = [
      new BuildRule(){}
  ]

  CVECheckExtension(
      final BuildRuleBuilder buildRuleBuilder = new CVEBuildRuleBuilder([
          "cvss-overall-threshold":CVSSOverallThresholdBuildRule.class,
          "cvss-individual-threshold":CVSSOverallThresholdBuildRule.class
      ])
  ) {
    this.buildRuleBuilder = buildRuleBuilder
    this.buildRules = new ListBackedBuildRules(defaultBuildRules)
  }

  def long refreshAfter = 86400 /** Seconds **/
//  def ScanResultHandler scanResultHandler = new BuildRulesScanResultHandler(buildRules);
  def ScanResultHandler scanResultHandler = new VulnerabilityCountResultHandler(0)


  def buildRule(Closure ruleConfigClosure) {
    ruleConfigClosure.resolveStrategy = Closure.DELEGATE_FIRST
    ruleConfigClosure.delegate = buildRuleBuilder
    ruleConfigClosure()
    buildRules.addBuildRule(buildRuleBuilder.create().value)
  }

  protected ListBackedBuildRules getBuildRules() {
    buildRules
  }
}
