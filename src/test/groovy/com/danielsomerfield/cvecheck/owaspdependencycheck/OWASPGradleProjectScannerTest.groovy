package com.danielsomerfield.cvecheck.owaspdependencycheck

import com.danielsomerfield.cvecheck.ScanningEngineSourceUpdate
import com.danielsomerfield.cvecheck.reporting.ScanReportGenerator
import groovy.mock.interceptor.MockFor
import org.junit.Test

import static com.danielsomerfield.cvecheck.TestScaffold.createTypeSafeMock
import static com.danielsomerfield.cvecheck.TestScaffold.mockProject
import static org.hamcrest.CoreMatchers.is
import static org.junit.Assert.assertThat

class OWASPGradleProjectScannerTest {

  private OWASPScanResult result = createTypeSafeMock(OWASPScanResult)
  private ScanningEngine<OWASPScanResult> scanningEngine = createTypeSafeMock(ScanningEngine) {
    it.demand.createScanResult { result }
  }

  @Test
  def void testBasicScan() {
    MockFor scanReportGeneratorMock = new MockFor(ScanReportGenerator)
    scanReportGeneratorMock.demand.generateReport { OWASPScanResult r -> assertThat(r, is(result)) }
    ScanReportGenerator<OWASPScanResult> scanReportGenerator =
        scanReportGeneratorMock.proxyDelegateInstance() as ScanReportGenerator<OWASPScanResult>

    MockFor updateMock = new MockFor(ScanningEngineSourceUpdate)
    updateMock.demand.run {ScanningEngine s -> assertThat(s, is(scanningEngine)) }
    ScanningEngineSourceUpdate update = updateMock.proxyDelegateInstance() as ScanningEngineSourceUpdate

    OWASPGradleProjectScanner scanner = new OWASPGradleProjectScanner(scanReportGenerator, this.scanningEngine, update)
    scanner.scan(mockProject())

    scanReportGeneratorMock.verify(scanReportGenerator)
    updateMock.verify(update)
  }
}
