package com.danielsomerfield.cvecheck.owaspdependencycheck

import com.danielsomerfield.cvecheck.ScanResult
import com.danielsomerfield.cvecheck.reporting.ScanReportGenerator
import groovy.mock.interceptor.MockFor
import org.junit.Test

import static com.danielsomerfield.cvecheck.TestScaffold.*
import static org.hamcrest.CoreMatchers.is
import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertThat

class OWASPGradleProjectScannerIntTest {

  @Test
  public void testBasicScan() {
    ScanResult result = new OWASPGradleProjectScanner(
        mockEngine(CREATE_TWO_VULNS_PER_DEPENDENCY),
        mockScanReportGenerator()
    ).scan(mockProject())
    assertThat(result.vulnCount, is(2))
  }

  def ScanReportGenerator mockScanReportGenerator() {
    def mock = new MockFor(ScanReportGenerator)
    mock.demand.generateReport { ScanResult rslt, out -> }
    mock.proxyDelegateInstance() as ScanReportGenerator
  }

  @Test
  public void testBasicScanWithNoVulns() {
    ScanResult result = new OWASPGradleProjectScanner(mockEngine(), mockScanReportGenerator()).scan(mockProject())
    assertThat(result.vulnCount, is(0))
  }

  @Test
  public void testBasicScanGeneratesReport() {
    def scanReportGeneratorMock = new MockFor(ScanReportGenerator)
    //TODO: way better assertions here
    scanReportGeneratorMock.demand.generateReport {ScanResult rslt, OutputStream out -> assertNotNull(out)}
    def scanReportGenerator = scanReportGeneratorMock.proxyDelegateInstance() as ScanReportGenerator
    new OWASPGradleProjectScanner(mockEngine(), scanReportGenerator).scan(mockProject())
    scanReportGeneratorMock.verify(scanReportGenerator)
  }


}
