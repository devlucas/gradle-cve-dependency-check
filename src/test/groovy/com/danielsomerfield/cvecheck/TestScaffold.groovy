package com.danielsomerfield.cvecheck

import groovy.mock.interceptor.MockFor
import org.gradle.api.Project
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.ConfigurationContainer
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.artifacts.ResolvedConfiguration
import org.owasp.dependencycheck.Engine
import org.owasp.dependencycheck.dependency.Dependency
import org.owasp.dependencycheck.dependency.Vulnerability
import org.owasp.dependencycheck.utils.Settings

class TestScaffold {
  def static Project mockProject() {
    def resolvedConfig = [
        getResolvedArtifacts: {
          [
              [getFile: { new File("asdf") }] as ResolvedArtifact
          ] as Set
        }
    ] as ResolvedConfiguration

    def project = [
        getConfigurations: {
          [
              [getResolvedConfiguration: { resolvedConfig }] as Configuration
          ] as ConfigurationContainer
        }
    ] as Project
    project
  }

  def static Engine mockEngine() {
    Settings.initialize()

    List<Dependency> dependencies = []

    return [
        getDependencies    : { dependencies },
        scan               : { File f -> dependencies.add(new Dependency(f)); dependencies },
        analyzeDependencies: {
          dependencies.each { Dependency dependency ->
            setVulnsForDep(dependency)
          }
        }
    ] as Engine
  }

  static def Vulnerability createVulnerability(String name) {
    def vulnerability = new Vulnerability()
    vulnerability.setName(name)
    vulnerability
  }


  def static void setVulnsForDep(Dependency dependency) {
    String name = dependency.getActualFile().getName()
    dependency.setVulnerabilities([
        createVulnerability(name + ".vuln-1"),
        createVulnerability(name + ".vuln-2")
    ] as TreeSet)
  }

  static def <T> T createTypeSafeMock(Class<T> clazz, Closure configuration){
    def mock = new MockFor(clazz)
    configuration(mock)
    mock.proxyDelegateInstance() as T
  }
}
