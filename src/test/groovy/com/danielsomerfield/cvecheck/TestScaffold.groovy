package com.danielsomerfield.cvecheck

import groovy.mock.interceptor.MockFor
import org.gradle.api.Project
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.ConfigurationContainer
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.artifacts.ResolvedConfiguration
import org.owasp.dependencycheck.Engine
import org.owasp.dependencycheck.dependency.Dependency
import org.owasp.dependencycheck.dependency.Vulnerability
import org.owasp.dependencycheck.utils.Settings

class TestScaffold {
  static def UNBOUNDED = Integer.MAX_VALUE

  def static Project mockProject() {
    def resolvedConfig = createTypeSafeMock(ResolvedConfiguration) {
      it.demand.getResolvedArtifacts {
        [
            createTypeSafeMock(ResolvedArtifact.class) {
              it.demand.getFile { new File("asdf") }
            }
        ] as Set
      }
    }

    createTypeSafeMock(Project) {
      it.demand.getConfigurations {
        [
            createTypeSafeMock(Configuration){
              it.demand.getResolvedConfiguration {resolvedConfig}
            }
        ] as ConfigurationContainer
      }
    }
  }

  def final static Closure CREATE_TWO_VULNS_PER_DEPENDENCY = { dependencies ->
    dependencies.each { Dependency dependency ->
      setVulnsForDep(dependency)
    }
  }

  def static Engine mockEngine(Closure dependencyAnalysis = {}) {
    Settings.initialize()

    List<Dependency> dependencies = []
    [
        getDependencies    : { dependencies },
        scan               : { File f -> dependencies.add(new Dependency(f)); dependencies },
        analyzeDependencies: { -> dependencyAnalysis(dependencies) }
    ] as Engine
  }

  static def Vulnerability createVulnerability(String name) {
    def vulnerability = new Vulnerability()
    vulnerability.setName(name)
    vulnerability
  }


  def static void setVulnsForDep(Dependency dependency) {
    String name = dependency.getActualFile().getName()
    dependency.setVulnerabilities([
        createVulnerability(name + ".vuln-1"),
        createVulnerability(name + ".vuln-2")
    ] as TreeSet)
  }

  static def <T> T createTypeSafeMock(Class<T> clazz, Closure configuration = {mock->}) {
    final def mock = new MockFor(clazz)
    configuration(mock)
    mock.proxyDelegateInstance() as T
  }

}
