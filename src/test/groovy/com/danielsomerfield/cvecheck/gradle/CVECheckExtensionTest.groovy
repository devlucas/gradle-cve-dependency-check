package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.BuildRuleBuilder
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.MockBuildRule
import groovy.mock.interceptor.MockFor
import org.junit.Test

import static com.danielsomerfield.util.Maybe.some
import static org.hamcrest.CoreMatchers.is
import static org.junit.Assert.assertThat

class CVECheckExtensionTest {

  private final MockBuildRule mockBuildRule = new MockBuildRule(null)

  @Test
  public void testBuildRuleRunsClosureAgainstBuilder() {
    final MockFor buildRuleBuilderMock = new MockFor(BuildRuleBuilder.class)
    buildRuleBuilderMock.demand.setBuildFailureStrategy(){ strategy-> assertThat(strategy, is("foo")) }
    buildRuleBuilderMock.demand.setThreshold(){threshold -> assertThat(threshold, is(5))}
    buildRuleBuilderMock.demand.create(){some(mockBuildRule)}
    final BuildRuleBuilder buildRuleBuilder = buildRuleBuilderMock.proxyDelegateInstance() as BuildRuleBuilder

    CVECheckExtension cveCheckExtension = new CVECheckExtension(buildRuleBuilder, [])
    cveCheckExtension.buildRule {
      buildFailureStrategy = "foo"
      threshold = 5
    }
    buildRuleBuilderMock.verify(buildRuleBuilder)
    assertThat(cveCheckExtension.getBuildRules().size(), is(1))
    assertThat(cveCheckExtension.getBuildRules().get(0), is(mockBuildRule))
  }

}
