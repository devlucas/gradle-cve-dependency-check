package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.ScanResult
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.BuildRule
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.BuildRuleBuilder
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.RuleOutcome
import com.danielsomerfield.cvecheck.owaspdependencycheck.OWASPScanResult
import groovy.mock.interceptor.MockFor
import org.junit.Test

import static com.danielsomerfield.util.Maybe.some
import static org.hamcrest.CoreMatchers.is
import static org.junit.Assert.assertThat

class CVECheckExtensionTest {

  @Test
  public void testRuleBuildingConfigurationRunsAgainstBuilder() {

    MockFor buildRuleBuilderMock = new MockFor(BuildRuleBuilder)
    buildRuleBuilderMock.demand.setBuildFailureStrategy(1) { String s -> assertThat(s, is("hello")) }
    buildRuleBuilderMock.demand.setThreshold(1) { int t -> assertThat(t, is(5)) }
    buildRuleBuilderMock.demand.create(1) {
      return some(new BuildRule(){
        @Override
        RuleOutcome execute(final ScanResult result) {
          RuleOutcome.Passed
        }

        @Override
        String getName() {
          return "anon build rule"
        }
      })
    }
    BuildRuleBuilder buildRuleBuilder = buildRuleBuilderMock.proxyDelegateInstance() as BuildRuleBuilder

    def cveCheck = new CVECheckExtension(buildRuleBuilder, []);

    cveCheck.buildRule {
      buildFailureStrategy = "hello"
      threshold = 5
    }

    cveCheck.scanResultHandler.handleScanResult(new OWASPScanResult([]))
    buildRuleBuilderMock.verify(buildRuleBuilder)

    assertThat(cveCheck.buildRules.size(), is(1))
    //TODO: validate build rules
  }

  @Test
  public void testDefaultBuildRulesCreatedWhenNoneConfigured() {
    BuildRule rule = new BuildRule() {
      @Override
      RuleOutcome execute(final ScanResult result) {
        RuleOutcome.Passed
      }

      @Override
      String getName() {
        "anon rule"
      }
    };

    MockFor buildRuleBuilderMock = new MockFor(BuildRuleBuilder)
    buildRuleBuilderMock.demand.setBuildFailureStrategy(0) { String s -> assertThat(s, is("hello")) }
    buildRuleBuilderMock.demand.setThreshold(0) { int t -> assertThat(t, is(5)) }
    BuildRuleBuilder buildRuleBuilder = buildRuleBuilderMock.proxyDelegateInstance() as BuildRuleBuilder
    def cveCheck = new CVECheckExtension(buildRuleBuilder, [rule]);

    cveCheck.scanResultHandler.handleScanResult(new OWASPScanResult([]))
    assertThat(cveCheck.buildRules.size(), is(1))
    assertThat(cveCheck.getBuildRules().get(0), is(rule))
    //TODO: assert that the default build rule is returned
  }

}
