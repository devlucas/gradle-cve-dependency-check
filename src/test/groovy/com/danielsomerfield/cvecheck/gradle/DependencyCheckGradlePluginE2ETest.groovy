package com.danielsomerfield.cvecheck.gradle

import org.apache.commons.io.IOUtils
import org.junit.Test
import org.slf4j.LoggerFactory

import static java.nio.file.Files.createTempDirectory
import static org.apache.commons.io.FileUtils.copyDirectory
import static org.hamcrest.CoreMatchers.containsString
import static org.hamcrest.CoreMatchers.not
import static org.hamcrest.core.Is.is
import static org.junit.Assert.assertThat

class DependencyCheckGradlePluginE2ETest {

    def logger = LoggerFactory.getLogger(this.getClass())

    @Test
    public void testVulnerabilityFoundInGradleProjectWithDefaultSettings() {
        executeGradleBuild(deployTestProject("/test-project")) { int returnCode, String stderr, File outputDir ->
            assertThat(returnCode, is(not(0)))
            assertThat(stderr, containsString("vulnerabilities were detected"))
            assertThat(new File(outputDir, "build/reports/vulnerabilities.html").exists(), is(true))
        }
    }

    @Test
    public void testVulnerabilityFoundInGradleProjectWithCustomSettings() {
        executeGradleBuild(deployTestProject("/test-project-custom")) { int returnCode, String stderr, File outputDir ->
            assertThat(returnCode, is(not(0)))
            assertThat(stderr, containsString("vulnerabilities were detected"))
            assertThat(new File(outputDir, "build/reports/vulnerabilities.html").exists(), is(true))
        }
    }

    def executeGradleBuild(File tempDirFile, Closure closure) {
        def process = new ProcessBuilder("./gradlew", "scan", "--info").directory(tempDirFile).start()
        def error = new ByteArrayOutputStream();
        IOUtils.copy(process.getErrorStream(), error)
        IOUtils.copy(process.getInputStream(), System.out)
        def errorOutput = new String(error.toByteArray(), "UTF-8")
        def returnCode = process.waitFor()
        closure(returnCode, errorOutput, tempDirFile)
    }

    def File deployTestProject(String testProjectPath) {
        def srcFile = new File(new URL(getClass().getResource(testProjectPath).toExternalForm()).toURI())
        def tempDirFile = createTempDirectory("test-project").toFile()
        copyDirectory(srcFile, tempDirFile)
        new File(tempDirFile, "gradlew").setExecutable(true, true)
        logger.info("DependencyCheckGradlePluginE2ETest deploying test project at ${tempDirFile.absolutePath}")
        tempDirFile
    }
}
