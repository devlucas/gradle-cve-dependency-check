package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.ScanResult
import com.danielsomerfield.cvecheck.ScanResultHandler
import com.danielsomerfield.cvecheck.Vulnerability
import com.danielsomerfield.cvecheck.gradle.handlers.buildRules.MockVulnerability
import groovy.mock.interceptor.MockFor
import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.api.logging.Logger
import org.hamcrest.CoreMatchers
import org.junit.Assert
import org.junit.Ignore
import org.junit.Test

import static com.danielsomerfield.cvecheck.TestScaffold.createTypeSafeMock
import static java.lang.Integer.MAX_VALUE
import static org.hamcrest.CoreMatchers.is
import static org.junit.Assert.assertThat

class ScanTaskTest {

  private Project project;

  def ScanTaskTest() {
    project = createTypeSafeMock(Project) {
      it.demand.getLogger {
        createTypeSafeMock(Logger) {
          it.demand.info {}
        }
      }
    }
  }

  private withMockScanner(final int vulnCount, final Closure test) {
    def scannerMock = new MockFor(GradleProjectScanner)
    scannerMock.demand.scan { p ->
      if (p == project) createTypeSafeMock(ScanResult) {
        it.demand.getVulnerabilities(MAX_VALUE) { createVulnList(vulnCount) }
      }
    }
    test(scannerMock.proxyDelegateInstance(), scannerMock)
  }

  private List<Vulnerability> createVulnList(int count) {
    def vulnerabilities = []
    count.times{vulnerabilities.add(new MockVulnerability(5))}
    return vulnerabilities
  }

  @Test(expected = GradleException)
  public void testScanWithVulnerabilities() {
    withMockScanner(2){ GradleProjectScanner scanner, mock ->
      new ScanTask(scanner).scan(project);
    }
  }

  @Test
  public void testScanWithNoVulnerabilitiesShouldNotThrow() {
    withMockScanner(0){ GradleProjectScanner scanner, mock ->
      new ScanTask(scanner).scan(project);
    }
  }

  @Test()
  public void testScanDelegatesToHandler() {
    MockFor scanResultHandlerMock = new MockFor(ScanResultHandler)
    scanResultHandlerMock.demand.handleScanResult(1){ScanResult r ->
      assertThat(r.getVulnerabilities().size(), is(3))
    }
    ScanResultHandler scanResultHandler = scanResultHandlerMock.proxyDelegateInstance() as ScanResultHandler

    withMockScanner(3){ GradleProjectScanner scanner, mock ->
      new ScanTask(scanner, scanResultHandler).scan(project);
    }

    scanResultHandlerMock.verify(scanResultHandler)
  }

}
