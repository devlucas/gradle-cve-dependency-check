package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.ScanResult
import groovy.mock.interceptor.MockFor
import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.api.logging.Logger
import org.junit.Test

import static java.lang.Integer.MAX_VALUE
import static org.junit.Assert.fail

class ScanTaskTest {

  private Project project;
  private Logger logger;

  def ScanTaskTest(){
    def projectMock = new MockFor(Project)

    def loggerMock = new MockFor(Logger)
    loggerMock.demand.info {}
    logger = loggerMock.proxyDelegateInstance() as Logger
    projectMock.demand.getLogger { logger }
    project = projectMock.proxyDelegateInstance() as Project;
  }

  @Test
  public void testScanWithVulnerabilities() {
    GradleProjectScanner scanner = mockScannerWithVulnCount(2)

    try {
      new ScanTask(scanner).scan(project)
      fail("Should have thrown exception indicating failure.")
    } catch (GradleException ignored) {
    }
  }

  @Test
  public void testScanWithNoVulnerabilitiesShouldNotThrow() {
    GradleProjectScanner scanner = mockScannerWithVulnCount(0)
    new ScanTask(scanner).scan(project)
  }

  def GradleProjectScanner mockScannerWithVulnCount(final int vulnCount) {
    def scanResultMock = new MockFor(ScanResult)
    scanResultMock.demand.getVulnCount(MAX_VALUE) {vulnCount}

    def scannerMock = new MockFor(GradleProjectScanner)
    scannerMock.demand.scan {p -> if (p==project) scanResultMock.proxyDelegateInstance()}

    scannerMock.proxyDelegateInstance() as GradleProjectScanner
  }
}
