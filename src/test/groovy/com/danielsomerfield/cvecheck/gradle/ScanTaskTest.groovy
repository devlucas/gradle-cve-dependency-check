package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.ScanResult
import com.danielsomerfield.cvecheck.reporting.ScanReportGenerator
import groovy.mock.interceptor.MockFor
import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.api.logging.Logger
import org.junit.Test

import static com.danielsomerfield.cvecheck.TestScaffold.createTypeSafeMock
import static java.lang.Integer.MAX_VALUE

class ScanTaskTest {

  private Project project;
  private Logger logger;
  private ScanReportGenerator scanReportGenerator;

  def ScanTaskTest() {
    def projectMock = new MockFor(Project)

    def loggerMock = new MockFor(Logger)
    loggerMock.demand.info {}
    logger = loggerMock.proxyDelegateInstance() as Logger
    projectMock.demand.getLogger { logger }
    project = projectMock.proxyDelegateInstance() as Project;

    scanReportGenerator = new MockFor(ScanReportGenerator).proxyDelegateInstance() as ScanReportGenerator
  }

  @Test(expected = GradleException)
  public void testScanWithVulnerabilitiesGeneratesReports() {
    GradleProjectScanner scanner = mockScannerWithVulnCount(2)
    new ScanTask(scanner, scanReportGenerator).scan(project)
  }

  @Test(expected = GradleException)
  public void testScanWithVulnerabilities() {
    GradleProjectScanner scanner = mockScannerWithVulnCount(2)
    new ScanTask(scanner, scanReportGenerator).scan(project)
  }

  @Test
  public void testScanWithNoVulnerabilitiesShouldNotThrow() {
    GradleProjectScanner scanner = mockScannerWithVulnCount(0)
    new ScanTask(scanner, scanReportGenerator).scan(project)
  }

  def GradleProjectScanner mockScannerWithVulnCount(final int vulnCount) {
    createTypeSafeMock(GradleProjectScanner) {
      it.demand.scan { p ->
        if (p == project) createTypeSafeMock(ScanResult) {
          it.demand.getVulnCount(MAX_VALUE) { vulnCount }
        }
      }
    }
  }

}
