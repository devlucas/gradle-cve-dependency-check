package com.danielsomerfield.cvecheck.gradle

import com.danielsomerfield.cvecheck.ScanResult
import groovy.mock.interceptor.MockFor
import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.api.logging.Logger
import org.junit.Test

import static com.danielsomerfield.cvecheck.TestScaffold.createTypeSafeMock
import static java.lang.Integer.MAX_VALUE

class ScanTaskTest {

  private Project project;

  def ScanTaskTest() {

    project = createTypeSafeMock(Project) {
      it.demand.getLogger {
        createTypeSafeMock(Logger) {
          it.demand.info {}
        }
      }
    }

  }

  def withMockScanner(int vulnCount, Closure test) {
    def scannerMock = new MockFor(GradleProjectScanner)
    scannerMock.demand.scan { p ->
      if (p == project) createTypeSafeMock(ScanResult) {
        it.demand.getVulnCount(MAX_VALUE) { vulnCount }
      }
    }
    test(scannerMock.proxyDelegateInstance(), scannerMock)
  }

  @Test(expected = GradleException)
  public void testScanWithVulnerabilitiesGeneratesReports() {
    withMockScanner(2){ GradleProjectScanner scanner, mock ->
      new ScanTask(scanner).scan(project);
    }
  }

  @Test(expected = GradleException)
  public void testScanWithVulnerabilities() {
    withMockScanner(2){ GradleProjectScanner scanner, mock ->
      new ScanTask(scanner).scan(project);
    }
  }

  @Test
  public void testScanWithNoVulnerabilitiesShouldNotThrow() {
    withMockScanner(0){ GradleProjectScanner scanner, mock ->
      new ScanTask(scanner).scan(project);
    }
  }

}
