package com.danielsomerfield.cvecheck

import com.danielsomerfield.cvecheck.owaspdependencycheck.ScanningEngine
import com.danielsomerfield.util.Maybe
import com.danielsomerfield.util.TimeSource
import groovy.mock.interceptor.MockFor
import org.junit.Test

import static com.danielsomerfield.cvecheck.TestScaffold.ATLEAST_ONCE
import static com.danielsomerfield.cvecheck.TestScaffold.UNBOUNDED
import static com.danielsomerfield.cvecheck.TestScaffold.createTypeSafeMock
import static com.danielsomerfield.util.Maybe.nothing
import static com.danielsomerfield.util.Maybe.some

class DefaultScanningEngineSourceUpdateTest {

  private static final long CURRENT_TIME = 1429745628261

  private final TimeSource timeSource = new TimeSource() {
    @Override
    public long currentTimeInMillis() {
      CURRENT_TIME
    }
  }

  @Test
  def void testUpdateShouldRunWithNegativeRefreshAfterTime() {
    runUpdateTest(-1, some(CURRENT_TIME - 1), true)
  }

  @Test
  def void testUpdateShouldRunWhenElapsedTimeIsGreaterThanRefreshAfterTime(){
    runUpdateTest(10, some(CURRENT_TIME - 1000 * 11), true)
  }

  @Test
  def void testUpdateShouldRunWithPositiveRefreshAndNeverRefreshed(){
    runUpdateTest(10, nothing(), true)
  }

  @Test
  def void testUpdateShouldNotRunWhenElapsedTimeIsLessThanRefreshAfterTime(){
    runUpdateTest(10, some(CURRENT_TIME - 1000 * 9), false)
  }

  def void runUpdateTest(long refreshAfterConfiguration, Maybe<Long> lastRefreshedTime, boolean expectSourceUpdate) {
    Configuration configuration = createTypeSafeMock(Configuration.class) {
      it.demand.refreshAfter(ATLEAST_ONCE) { refreshAfterConfiguration }
    }

    MockFor runtimeStoreMock = new MockFor(RuntimeStore)
    runtimeStoreMock.demand.lastRefreshed(UNBOUNDED) { lastRefreshedTime }
    runtimeStoreMock.demand.refreshed(expectSourceUpdate ? 1 : 0) {}
    RuntimeStore runtimeStore = runtimeStoreMock.proxyDelegateInstance() as RuntimeStore

    MockFor scanningEngineMock = new MockFor(ScanningEngine)
    scanningEngineMock.demand.updateSource(expectSourceUpdate ? 1 : 0) {}
    ScanningEngine scanningEngine = scanningEngineMock.proxyDelegateInstance() as ScanningEngine

    DefaultScanningEngineSourceUpdate update = new DefaultScanningEngineSourceUpdate(configuration, runtimeStore, timeSource)
    update.run(scanningEngine)
    scanningEngineMock.verify(scanningEngine)
    runtimeStoreMock.verify(runtimeStore)
  }


}
