package com.danielsomerfield.cvecheck

import com.danielsomerfield.util.FixedTimeSource
import com.danielsomerfield.util.TimeSource
import com.danielsomerfield.util.io.ByteArrayInputStreamFactory
import com.danielsomerfield.util.io.ByteArrayOutputStreamFactory
import com.danielsomerfield.util.io.InputStreamFactory
import com.danielsomerfield.util.io.OutputStreamFactory

import static com.danielsomerfield.util.Maybe.nothing
import static com.danielsomerfield.util.Maybe.some
import static org.hamcrest.CoreMatchers.is
import org.junit.Test
import static org.junit.Assert.assertThat

class DefaultRuntimeStoreTest {

  private static final TimeSource TIME_SOURCE = new FixedTimeSource(1429745628261)
  final OutputStreamFactory outputStreamFactory = new ByteArrayOutputStreamFactory()
  final InputStreamFactory inputStreamFactory = new ByteArrayInputStreamFactory("lastRefreshed=1429745628262".getBytes("UTF-8"))

  @Test
  public void testRefreshCallWritesTime() {

    DefaultRuntimeStore store = new DefaultRuntimeStore(outputStreamFactory, inputStreamFactory, TIME_SOURCE);
    store.refreshed()

    Properties resultProperties = new Properties();
    resultProperties.load(new ByteArrayInputStream(outputStreamFactory.toByteArray()))
    assertThat(resultProperties.getProperty("lastRefreshed"), is(TIME_SOURCE.currentTimeInMillis().toString()))
  }

  @Test
  public void testLastRefreshedReadsTime() {
    final InputStreamFactory inputStreamFactory = new ByteArrayInputStreamFactory("lastRefreshed=1429745628262".getBytes("UTF-8"))
    DefaultRuntimeStore store = new DefaultRuntimeStore(outputStreamFactory, inputStreamFactory, TIME_SOURCE);
    assertThat(store.lastRefreshed(), is(some(1429745628262l)))
  }

  @Test
  public void testLastRefreshedIsNothingIfEmpty() {
    final InputStreamFactory inputStreamFactory = new ByteArrayInputStreamFactory(new byte[0])
    DefaultRuntimeStore store = new DefaultRuntimeStore(outputStreamFactory, inputStreamFactory, TIME_SOURCE);
    assertThat(store.lastRefreshed(), is(nothing()))
  }

}
